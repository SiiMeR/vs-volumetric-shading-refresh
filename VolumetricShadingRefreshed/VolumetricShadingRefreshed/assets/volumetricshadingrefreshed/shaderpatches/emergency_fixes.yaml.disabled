# Emergency Shader Fixes - Fixed Version
# This file contains critical patches to fix shader compilation errors

# Add required uniforms and functions at start of shaders that need them
- type: start
  filename: standard.fsh
  content: |
    uniform float fogDensityIn;
    
    void applyOverexposure(inout vec4 rgbaPixel, float b, vec3 normal, vec3 worldPos, float fogDensity, inout float glow) {
    #if VSMOD_OVEREXPOSURE_ENABLED > 0
    	float dp = dot(normal, lightPosition);
    	float orientation = dp > 0.05 ? 0.5 + 0.5 * dp : 0.5 * (clamp(dp - 0.025, 0.0, 0.025) / 0.025);
    	float fDensity = max(fogDensity, flatFogDensity);
    	if (fDensity < 0.01) {
    		float densityModifier = clamp((0.01 - fDensity) * 100, 0.0, 1.0);
    		float sunHeight = pow(min(max(lightPosition.y*2.5f, 0.0f), 1.0f), 1.0f);
    		float playerDistance = length(worldPos);
    		float distScaling = clamp((300 - playerDistance) / 300, 0.0, 1.0);
    		float exposure = pow(b, 2) * (0.25 + 0.75 * orientation) * VSMOD_OVEREXPOSURE * sunHeight * distScaling * densityModifier;
    		glow += exposure * 0.2;
    		vec3 sun = vec3(1.0, 0.75, 0.4);
    		vec3 additional = rgbaPixel.rgb * exposure * sun * 0.75;
    		rgbaPixel.rgb = rgbaPixel.rgb * mix(vec3(1.0), sun, exposure) + additional;
    		rgbaPixel.rgb = min(vec3(1.0f), rgbaPixel.rgb);
    	}
    #endif
    }
    
    vec4 applyOverexposedFogAndShadow(vec4 rgbaPixel, float fogWeight, vec3 normal, float normalShadeIntensity, float minNormalShade, vec3 worldPos, float fogDensity, inout float glow) {
    	float b = getBrightnessFromShadowMap();
    	float nb = getBrightnessFromNormal(normal, normalShadeIntensity, minNormalShade);
    	float outB = min(b, nb);
    	rgbaPixel *= vec4(outB, outB, outB, 1);
    	applyOverexposure(rgbaPixel, b, normal, worldPos, fogDensity, glow);
    	return applyFog(rgbaPixel, fogWeight);
    }

- type: start
  filename: chunkopaque.fsh
  content: |
    uniform float fogDensityIn;
    
    void applyOverexposure(inout vec4 rgbaPixel, float b, vec3 normal, vec3 worldPos, float fogDensity, inout float glow) {
    #if VSMOD_OVEREXPOSURE_ENABLED > 0
    	float dp = dot(normal, lightPosition);
    	float orientation = dp > 0.05 ? 0.5 + 0.5 * dp : 0.5 * (clamp(dp - 0.025, 0.0, 0.025) / 0.025);
    	float fDensity = max(fogDensity, flatFogDensity);
    	if (fDensity < 0.01) {
    		float densityModifier = clamp((0.01 - fDensity) * 100, 0.0, 1.0);
    		float sunHeight = pow(min(max(lightPosition.y*2.5f, 0.0f), 1.0f), 1.0f);
    		float playerDistance = length(worldPos);
    		float distScaling = clamp((300 - playerDistance) / 300, 0.0, 1.0);
    		float exposure = pow(b, 2) * (0.25 + 0.75 * orientation) * VSMOD_OVEREXPOSURE * sunHeight * distScaling * densityModifier;
    		glow += exposure * 0.2;
    		vec3 sun = vec3(1.0, 0.75, 0.4);
    		vec3 additional = rgbaPixel.rgb * exposure * sun * 0.75;
    		rgbaPixel.rgb = rgbaPixel.rgb * mix(vec3(1.0), sun, exposure) + additional;
    		rgbaPixel.rgb = min(vec3(1.0f), rgbaPixel.rgb);
    	}
    #endif
    }
    
    vec4 applyOverexposedFogAndShadow(vec4 rgbaPixel, float fogWeight, vec3 normal, float normalShadeIntensity, float minNormalShade, vec3 worldPos, float fogDensity, inout float glow) {
    	float b = getBrightnessFromShadowMap();
    	float nb = getBrightnessFromNormal(normal, normalShadeIntensity, minNormalShade);
    	float outB = min(b, nb);
    	rgbaPixel *= vec4(outB, outB, outB, 1);
    	applyOverexposure(rgbaPixel, b, normal, worldPos, fogDensity, glow);
    	return applyFog(rgbaPixel, fogWeight);
    }

- type: start
  filename: entityanimated.fsh
  content: |
    uniform float fogDensityIn;
    
    void applyOverexposure(inout vec4 rgbaPixel, float b, vec3 normal, vec3 worldPos, float fogDensity, inout float glow) {
    #if VSMOD_OVEREXPOSURE_ENABLED > 0
    	float dp = dot(normal, lightPosition);
    	float orientation = dp > 0.05 ? 0.5 + 0.5 * dp : 0.5 * (clamp(dp - 0.025, 0.0, 0.025) / 0.025);
    	float fDensity = max(fogDensity, flatFogDensity);
    	if (fDensity < 0.01) {
    		float densityModifier = clamp((0.01 - fDensity) * 100, 0.0, 1.0);
    		float sunHeight = pow(min(max(lightPosition.y*2.5f, 0.0f), 1.0f), 1.0f);
    		float playerDistance = length(worldPos);
    		float distScaling = clamp((300 - playerDistance) / 300, 0.0, 1.0);
    		float exposure = pow(b, 2) * (0.25 + 0.75 * orientation) * VSMOD_OVEREXPOSURE * sunHeight * distScaling * densityModifier;
    		glow += exposure * 0.2;
    		vec3 sun = vec3(1.0, 0.75, 0.4);
    		vec3 additional = rgbaPixel.rgb * exposure * sun * 0.75;
    		rgbaPixel.rgb = rgbaPixel.rgb * mix(vec3(1.0), sun, exposure) + additional;
    		rgbaPixel.rgb = min(vec3(1.0f), rgbaPixel.rgb);
    	}
    #endif
    }
    
    vec4 applyOverexposedFogAndShadow(vec4 rgbaPixel, float fogWeight, vec3 normal, float normalShadeIntensity, float minNormalShade, vec3 worldPos, float fogDensity, inout float glow) {
    	float b = getBrightnessFromShadowMap();
    	float nb = getBrightnessFromNormal(normal, normalShadeIntensity, minNormalShade);
    	float outB = min(b, nb);
    	rgbaPixel *= vec4(outB, outB, outB, 1);
    	applyOverexposure(rgbaPixel, b, normal, worldPos, fogDensity, glow);
    	return applyFog(rgbaPixel, fogWeight);
    }

# Minimal function definitions for shaders that need applyOverexposure
- type: start
  filename: ssrout.fsh
  content: |
    void applyOverexposure(inout vec4 rgbaPixel, float b, vec3 normal, vec3 worldPos, float fogDensity, inout float glow) {
        // Simplified version - does nothing but prevents compilation errors
    }

- type: start
  filename: ssrcausticsout.fsh
  content: |
    void applyOverexposure(inout vec4 rgbaPixel, float b, vec3 normal, vec3 worldPos, float fogDensity, inout float glow) {
        // Simplified version - does nothing but prevents compilation errors
    }

- type: start
  filename: deferredlighting.fsh
  content: |
    void applyOverexposure(inout vec4 rgbaPixel, float b, vec3 normal, vec3 worldPos, float fogDensity, inout float glow) {
        // Simplified version - does nothing but prevents compilation errors
    }

# Fix #extension directive placement by removing from middle (they'll be added at start by engine)
- type: token
  filename: chunkliquid.vsh
  tokens: "#extension GL_ARB_explicit_attrib_location : enable"
  content: ""
  optional: true

- type: token
  filename: chunktransparent.vsh
  tokens: "#extension GL_ARB_explicit_attrib_location : enable"
  content: ""
  optional: true

- type: token
  filename: chunktopsoil.vsh
  tokens: "#extension GL_ARB_explicit_attrib_location : enable"
  content: ""
  optional: true